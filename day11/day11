#!/usr/bin/env lua

function split(pString, pPattern)
   local Table = {}
   local fpat = "(.-)" .. pPattern
   local last_end = 1
   local s, e, cap = pString:find(fpat, 1)
   while s do
      if s ~= 1 or cap ~= "" then
     table.insert(Table,cap)
      end
      last_end = e+1
      s, e, cap = pString:find(fpat, last_end)
   end
   if last_end <= #pString then
      cap = pString:sub(last_end)
      table.insert(Table, cap)
   end
   return Table
end

function max(a, b)
    if a > b then return a end
    return b
end

function min(a, b)
    if a < b then return a end
    return b
end

function rowstring(U, row)
    return table.concat(U[row])
end

function columnstring(U, col)
    colstr=''
    for i = 1, #U do colstr = colstr..U[i][col] end
    return colstr
end

function readuniverse(input)
    local universe={}
    i=1
    for i, line in pairs(split(input, '\n')) do
        j=1
        universe[i]={}
        for c in string.gmatch(line, ".") do
           universe[i][j] = c
           j=j+1
        end
    end
    return universe
end

function printuniverse(U)
    for i = 1, #U do
        print(i, rowstring(U, i))
    end
    return U
end

function expandrows(U)
    Expanded = {}
    expandedrow = {}
    for i=1, #U[1] do expandedrow[i] = '*' end
    for i = 1, #U do
        if string.match(rowstring(U, i), '#') then
            Expanded[i] = U[i]
        else
            Expanded[i] = expandedrow
        end
    end
    return Expanded
end

function expandcolumns(U)
    Expanded = {}
    for j = 1, #U[1] do
        for i = 1, #U do
            if j == 1 then Expanded[i] = {} end
        end
        if string.match(columnstring(U, j), '#') then
            for i = 1, #U do
               Expanded[i][j] = U[i][j]
            end
        else
            for i = 1, #U do
                if U[i][j] == 'X' then
                    Expanded[i][j] = 'X'
                else
                    Expanded[i][j] = '*'
                end
            end
        end
    end
    return Expanded
end

function getgalaxies(U)
    Galaxies = {}
    g=0
    for i = 1, #U do
        for j = 1, #U[i] do
            if U[i][j] == '#' then
                g = g+1
                Galaxies[g] = {i, j}
            end
        end
    end
    return Galaxies
end

function expansionfactor(C, XPN)
    if C == '*' then return XPN end
    return 1
end

function solve(U, G, XPN)
    sum=0
    for i=1, #G do
        for j=i+1, #Galaxies do
            startx = min(G[i][1], G[j][1])
            endx   = max(G[i][1], G[j][1])
            starty = min(G[i][2], G[j][2])
            endy   = max(G[i][2], G[j][2])

            dist=0
            if startx == endx then
                p=startx
                for q = starty+1, endy do
                    dist = dist + expansionfactor(U[p][q], XPN)
                end
            else
                q=starty
                for p = startx+1, endx do
                   dist = dist + expansionfactor(U[p][q], XPN)
                end
                p=endx
                for q = starty+1, endy do
                   dist = dist + expansionfactor(U[p][q], XPN)
                end
            end

            if XPN==1 then
                computed = endx-startx + endy-starty
                if dist ~= computed then
                    path=G[i][1]..','..G[i][2]..'->'..G[j][1]..','..G[j][2]
                    print('alert', path, dist, 'computed: '..computed)
                end
            end
            sum = sum + dist
        end
    end
    return sum
end

-------------------------------------------------------------------------------
-- Main
-------------------------------------------------------------------------------

universe = expandcolumns(expandrows(readuniverse(io.read("*all"))))
galaxies = getgalaxies(universe)

for _, i in pairs({1, 2, 1000000}) do
    print(i, solve(universe, galaxies, i))
end
