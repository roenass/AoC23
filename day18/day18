#!/usr/bin/env julia
using DataStructures

include("../lib/AoC.jl")


function solve18(L, Part)
    #Dirs = Dict("R" => (0, 1), "L" => (0, -1), "U" => (-1, 0), "D" => (1, 0))
    (x, y) = (maxx, maxy) = (minx, miny) = (1, 1)
    for line in L
        (dir, len, clr) = split(line); l=parse(Int, len)
        if     dir == "R"   x+=l
        elseif dir == "L"   x-=l
        elseif dir == "U"   y-=l
        elseif dir == "D"   y+=l
        else   println("hunh ", dir) end
        maxx = max(maxx, x); maxy = max(maxy, y)
        minx = min(minx, x); miny = min(miny, y)
    end
    sizex = maxx - minx + 1; sizey = maxy - miny + 1
    offx = -minx + 2; offy = -miny + 2
#    println("Size: ", sizex,"x", sizey, " Max x,y ", maxx, ",", maxy, " Min x,y: ", minx, ",", miny, " Start x,y: ", offx, ",", offy)
    G=Matrix{String}(undef, sizey, sizex)
    fill!(G, ".")
    (x, y) = (offy, offx)
    for line in L
        (dir, len, clr) = split(line); l=parse(Int, len)
        # Move
        #(x,y) = (x + Dirs[dir][1], y+Dirs[dir][2])
        if     dir == "R"   for i ∈ 1:l G[x,y+i] = "#" end; y+=l
        elseif dir == "L"   for i ∈ 1:l G[x,y-i] = "#" end; y-=l
        elseif dir == "U"   for i ∈ 1:l G[x-i,y] = "#" end; x-=l
        elseif dir == "D"   for i ∈ 1:l G[x+i,y] = "#" end; x+=l
        else   println("hunh ", dir) end
    end
    for r ∈ 1:cols(G)
        enclose=false; enclosing=false
        for i in 1:length(row(G,r))
            if G[r,i]=="#"
                enclose = enclose==true&&enclosing==true ? false : true
                if i<length(row(G,r)) && ("#" ∉ G[r,i+1:length(row(G,r))])
                    enclose=false
                end
                enclosing=false
            end
            if G[r,i]=="." && enclose==true G[r,i]="#"; enclosing=true end
        end
        enclose=false; enclosed=false
    end
#    printgrid(G)
    return count(i->(i=="#"), G)
end

function solver(L)
    for p ∈ [1]
        println("part ", p, " ", solve18(L,p))
    end
end

solver(readlines(readblocks()[1]))
