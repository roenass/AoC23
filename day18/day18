#!/usr/bin/env julia
using DataStructures

include("../lib/AoC.jl")


function solve18(L, Part)
    Moves = Dict("R" => (0, 1), "L" => (0, -1), "U" => (-1, 0), "D" => (1, 0))
    (x, y) = (maxx, maxy) = (minx, miny) = (1, 1)
    for line ∈ L
        (dir, len, clr) = split(line); l=parse(Int, len)        
        (movex, movey) = Moves[dir]
        (x, y) = (x+movex*l, y+movey*l)
        maxx = max(maxx, x); maxy = max(maxy, y)
        minx = min(minx, x); miny = min(miny, y)
    end
    sizex = maxx - minx + 1; sizey = maxy - miny + 1
    offx = -minx + 2; offy = -miny + 2
#   println("Size: ", sizex,"x", sizey, " Max x,y ", maxx, ",", maxy, " Min x,y: ", minx, ",", miny, " Start x,y: ", offx, ",", offy)
    G=Matrix{String}(undef, sizex, sizey)
    fill!(G, ".")
    (x, y) = (offx, offy)
    for line ∈ L
        (dir, len, clr) = split(line); l=parse(Int, len)
        (movex, movey) = Moves[dir]
        (movex, movey) = (x+movex*l, y+movey*l)
        for i ∈ min(x,movex):max(x,movex) G[i, y] = "#" end
        for i ∈ min(y,movey):max(y,movey) G[x, i] = "#" end
        (x, y) = (movex, movey)
    end
    for r ∈ 1:cols(G)
        enclose=false; enclosing=false
        for i ∈ 1:length(row(G,r))
            if G[r,i]=="#"
                enclose = enclose==true&&enclosing==true ? false : true
                if i<length(row(G,r)) && ("#" ∈ G[r,i+1:length(row(G,r))])   # ∉
                    enclose=true
                end
                if i<length(row(G,r)) && ("#" ∉ G[r,i+1:length(row(G,r))])   # ∉
                    enclose=false
                end
                if i<length(row(G,r)) && G[r,i+1] == '.' && "#" ∈ G[r,i+1:length(row(G,r))]
                    #enclose=true
                end
                enclosing=false
            end
            if G[r,i]=="." && enclose==true G[r,i]="#"; enclosing=true end
        end
        enclose=false; enclosed=false
    end
    #   printgrid(G)
    return count(i->(i=="#"), G)
end

function solver(L)
    for p ∈ [1]
        println("part ", p, " ", solve18(L,p))
    end
end

solver(readlines(readblocks()[1]))
