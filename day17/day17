#!/usr/bin/env julia
using DataStructures

include("../lib/AoC.jl")

function solve17(G, Beam, Part)
    HP=BinaryMinHeap{Tuple{Int, Int, Int, Int, Int}}()
    Djv=Dict{Tuple{Int,Int,Int,Int}, Int}()
    Moves=([-1,0],[0,1],[1,0],[0,-1])
    result=-1

    push!(HP, Beam)
    while length(HP) > 0
        (loss,r,c,lr,ud) = pop!(HP)
        if haskey(Djv, (r,c,lr,ud)) continue end
        Djv[(r,c,lr,ud)]=loss
        for i ∈ 1:length(Moves)
            (dr, dc) = Moves[i]
            rr = r+dr;  cc = c+dc
            nd = i-1
            ni = (nd==lr ? ud+1 : 1)
            notreverse = ((nd + 2)%4 != lr)
            if Part == 1
                isvalid = (ni<=3)
            else
                isvalid = (ni<=10 && (nd==lr || ud>=4 || ud==-1))
            end
            
            if 1<=rr<=rows(G) && 1<=cc<=cols(G) && notreverse && isvalid
                 cost = G[rr,cc]
                 push!(HP, (loss+cost,rr,cc,nd,ni))
            end
        end
    end
    for (r,c,lr,ud) ∈ keys(Djv)
        val=Djv[(r,c,lr,ud)]
        if r==rows(G) && c==cols(G)
            result = (result==-1 ? val : min(result, val))
        end
    end
    return result
end

function solver(G)
    for i  ∈ [1,2]
        println("part ", i, " ", solve17(G, (0,1,1,-1,-1), i))
    end
end

solver(readnumgrid(readblocks()[1]))
