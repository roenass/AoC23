#!/usr/bin/env julia
using DataStructures

include("../lib/AoC.jl")


function start(G)
    for c ∈ 1:cols(G) for r ∈ 1:rows(G) if G[c, r] == 'S'  return (c, r) end end end
    return (-1, -1)
end

function wok(G, C, c, r, maxsteps, steps)
    if haskey(C, (c,r,steps)) return 0 end
    C[(c,r,steps)]=true
    if steps≥maxsteps
        if c≥1 && c≤cols(G) && r≥1 && r≤rows(G) && G[c,r] ∈ ['.', 'S']
            G[c,r] = 'o'
            return 1
        end
        return 0
    end
    if c<1 || c>cols(G) || r<1 || r>rows(G) || G[c,r] ∈ ['#'] return 0 end
    tiles=1
    for (cm, rm) ∈ [(0, 1), (0, -1), (-1, 0), (1, 0)]
        tiles += wok(G, C, c+cm, r+rm, maxsteps, steps+1)
    end
    return tiles
end

function solve20(G, maxsteps)
    Djv=Dict{Tuple{Int,Int,Int}, Bool}()
    (startc, startr) = start(G)
    wok(G, Djv, startc, startr, maxsteps, 0)
    return count(c->(c=='o'), G)
end

function solver(b)
    for p ∈ [1, 2]
        G=readgrid(b)
        println("part ", p, " ", solve20(G,p==1 ? 64 : 26501365))
    end
end

solver(readblocks()[1])
